// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]
  
  // Premium features
  isPremium     Boolean   @default(false)
  stripeCustomerId String? @unique
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App-specific Models
model Board {
  id          String   @id @default(cuid())
  title       String
  description String?
  color       String?  @default("#0079bf") // Default Trello blue
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lists       List[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
}

model List {
  id        String   @id @default(cuid())
  title     String
  order     Int
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([boardId])
  @@unique([boardId, order])
}

model Card {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  order       Int
  listId      String
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  
  // AI-generated checklist for study tasks
  checklist   Json?    @default("[]") // Array of {id, text, completed, aiGenerated}
  
  // Additional metadata
  dueDate     DateTime?
  labels      String[] @default([])
  coverImage  String?
  
  // AI task breakdown metadata
  isStudyTask Boolean  @default(false)
  aiProcessed Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([listId])
  @@unique([listId, order])
}
